[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[project]
name = "image_snip"
dynamic = ["version"]
description = 'Command-line utility to apply the same supported operations to a batch of image files.'
readme = "README.md"
requires-python = ">=3.8"
license = {file = "LICENSE"}
keywords = [ "images", "crop"]

authors = [
  { name = "Bill Melvin", email = "bill@sbillmelvin.com" },
]

dependencies = [ "pillow" ]

[project.urls]
Source = "https://github.com/wmelvin/image-snip"

[tool.setuptools.dynamic]
version = {attr = "image_snip.__version__"}

[tool.setuptools.packages.find]
where = ["."]
include = ["image_snip*"]
exclude = ["test*"]
namespaces = false

[tool.pytest.ini_options]
pythonpath = ["."]

[project.scripts]
image_snip = "image_snip:main"

[tool.ruff]
line-length = 88
indent-width = 4
extend-exclude = ["tests"]

[tool.ruff.lint]
# flake8-builtins (A)
# flake8-bugbear (B)
# flake8-comprehensions (C4)
# pycodestyle errors (E)
# Pyfakes (F)
# flake8-future-annotations (FA)
# isort (I)
# flake8-implicit-str-concat (ISC)
# Perflint (PERF)
# flake8-use-pathlib (PTH)
# flake8-pyi (PYI)
# flake8-return (RET)
# flake8-bandit (S)
# flake8-simplify (SIM)
# Warning (W)
select = ["A", "B", "C4", "E", "F", "FA", "I", "ISC", "PERF", "PTH", "PYI", "RET", "S", "SIM", "W"]
# select = ["ALL"]

[tool.ruff.extend-per-file-ignores]
# Permit use of assert.
"__init__.py" = ["S101"]